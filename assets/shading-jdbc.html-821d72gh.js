const e=JSON.parse('{"key":"v-304fa9bb","path":"/md/middleware/ShardingSphere/shading-jdbc.html","title":"基于ShardingJdbc的分库分表方案","lang":"zh-CN","frontmatter":{"title":"基于ShardingJdbc的分库分表方案","icon":"fab fa-markdown","tag":"ShardingJdbc","description":"基于数据库中间件shardingjdbc的千万级数据分库分表 简介 随着公司业务量增长迅速，数据呈线性增长趋势，导致数据量达到了千万级甚至亿级，这时候可能会面临单库存储瓶颈问题和单表查询效率问题，简单的读写分离以及缓存已经无法满足这样的业务场景，鉴于客户对技术方面的要求，这时就不得不考虑采用分库分表解决该问题。本篇文章主要讲解千万级数据量的分库分表解决方案和落地实战。文章会结合真实的业务场景阐述分库分表解决方案，以及分库分表后带来的各种问题并给出建议的解决方案，最后讲解开源中间件shardingjdbc的使用和相关注意事项。 一、业务分析","head":[["meta",{"property":"og:url","content":"https://Alpha-yhma.github.io/md/middleware/ShardingSphere/shading-jdbc.html"}],["meta",{"property":"og:site_name","content":"Ikaros"}],["meta",{"property":"og:title","content":"基于ShardingJdbc的分库分表方案"}],["meta",{"property":"og:description","content":"基于数据库中间件shardingjdbc的千万级数据分库分表 简介 随着公司业务量增长迅速，数据呈线性增长趋势，导致数据量达到了千万级甚至亿级，这时候可能会面临单库存储瓶颈问题和单表查询效率问题，简单的读写分离以及缓存已经无法满足这样的业务场景，鉴于客户对技术方面的要求，这时就不得不考虑采用分库分表解决该问题。本篇文章主要讲解千万级数据量的分库分表解决方案和落地实战。文章会结合真实的业务场景阐述分库分表解决方案，以及分库分表后带来的各种问题并给出建议的解决方案，最后讲解开源中间件shardingjdbc的使用和相关注意事项。 一、业务分析"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-10T08:44:07.000Z"}],["meta",{"property":"article:author","content":"yhma"}],["meta",{"property":"article:tag","content":"ShardingJdbc"}],["meta",{"property":"article:modified_time","content":"2023-12-10T08:44:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于ShardingJdbc的分库分表方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-10T08:44:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"yhma\\",\\"url\\":\\"https://github.com/Alpha-yhma/Alpha-yhma.github.io\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"一、业务分析","slug":"一、业务分析","link":"#一、业务分析","children":[]},{"level":2,"title":"1.1 业务场景","slug":"_1-1-业务场景","link":"#_1-1-业务场景","children":[]},{"level":2,"title":"1.2 数据量分析","slug":"_1-2-数据量分析","link":"#_1-2-数据量分析","children":[]},{"level":2,"title":"1.3 性能问题分析","slug":"_1-3-性能问题分析","link":"#_1-3-性能问题分析","children":[]},{"level":2,"title":"二、分库分表解决方案","slug":"二、分库分表解决方案","link":"#二、分库分表解决方案","children":[]},{"level":2,"title":"2.1 如何拆分库和表","slug":"_2-1-如何拆分库和表","link":"#_2-1-如何拆分库和表","children":[{"level":3,"title":"2.1.1 水平拆分","slug":"_2-1-1-水平拆分","link":"#_2-1-1-水平拆分","children":[]},{"level":3,"title":"2.1.2 垂直拆分","slug":"_2-1-2-垂直拆分","link":"#_2-1-2-垂直拆分","children":[]},{"level":3,"title":"2.1.3 授信申请业务拆分案例","slug":"_2-1-3-授信申请业务拆分案例","link":"#_2-1-3-授信申请业务拆分案例","children":[]}]},{"level":2,"title":"2.2 分片键的选择","slug":"_2-2-分片键的选择","link":"#_2-2-分片键的选择","children":[{"level":3,"title":"2.2.1 选择合适的分片键","slug":"_2-2-1-选择合适的分片键","link":"#_2-2-1-选择合适的分片键","children":[]},{"level":3,"title":"2.2.2 分片算法","slug":"_2-2-2-分片算法","link":"#_2-2-2-分片算法","children":[]}]},{"level":2,"title":"2.3 分库分表后带来的问题","slug":"_2-3-分库分表后带来的问题","link":"#_2-3-分库分表后带来的问题","children":[{"level":3,"title":"2.3.1 数据迁移","slug":"_2-3-1-数据迁移","link":"#_2-3-1-数据迁移","children":[]},{"level":3,"title":"2.3.2 分布式主键","slug":"_2-3-2-分布式主键","link":"#_2-3-2-分布式主键","children":[]},{"level":3,"title":"2.3.3 分布式事务","slug":"_2-3-3-分布式事务","link":"#_2-3-3-分布式事务","children":[]},{"level":3,"title":"2.3.4 跨库关联查询","slug":"_2-3-4-跨库关联查询","link":"#_2-3-4-跨库关联查询","children":[]},{"level":3,"title":"2.4.5 小结","slug":"_2-4-5-小结","link":"#_2-4-5-小结","children":[]}]},{"level":2,"title":"2.4 本章小结","slug":"_2-4-本章小结","link":"#_2-4-本章小结","children":[]},{"level":2,"title":"三、基于Shardingjdbc的分库分表案例","slug":"三、基于shardingjdbc的分库分表案例","link":"#三、基于shardingjdbc的分库分表案例","children":[]},{"level":2,"title":"3.1 分库分表案例","slug":"_3-1-分库分表案例","link":"#_3-1-分库分表案例","children":[]},{"level":2,"title":"3.3 shardingjdbc注意事项","slug":"_3-3-shardingjdbc注意事项","link":"#_3-3-shardingjdbc注意事项","children":[]},{"level":2,"title":"3.4 shardingsphere多种运行模式对比","slug":"_3-4-shardingsphere多种运行模式对比","link":"#_3-4-shardingsphere多种运行模式对比","children":[]},{"level":2,"title":"3.5 shardingsphere 数据加解密","slug":"_3-5-shardingsphere-数据加解密","link":"#_3-5-shardingsphere-数据加解密","children":[]},{"level":2,"title":"3.5 shardingjdbc对数据库的支持情况","slug":"_3-5-shardingjdbc对数据库的支持情况","link":"#_3-5-shardingjdbc对数据库的支持情况","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1702197847000,"updatedTime":1702197847000,"contributors":[{"name":"alpha","email":"dota2again2@hotmail.com","commits":1}]},"readingTime":{"minutes":36.64,"words":10991},"filePathRelative":"md/middleware/ShardingSphere/shading-jdbc.md","localizedDate":"2023年12月10日","excerpt":"<h1> 基于数据库中间件shardingjdbc的千万级数据分库分表</h1>\\n<h2> 简介</h2>\\n<p>随着公司业务量增长迅速，数据呈线性增长趋势，导致数据量达到了千万级甚至亿级，这时候可能会面临单库存储瓶颈问题和单表查询效率问题，简单的读写分离以及缓存已经无法满足这样的业务场景，鉴于客户对技术方面的要求，这时就不得不考虑采用分库分表解决该问题。本篇文章主要讲解千万级数据量的分库分表解决方案和落地实战。文章会结合真实的业务场景阐述分库分表解决方案，以及分库分表后带来的各种问题并给出建议的解决方案，最后讲解开源中间件shardingjdbc的使用和相关注意事项。</p>\\n<h2> 一、业务分析</h2>","autoDesc":true}');export{e as data};
